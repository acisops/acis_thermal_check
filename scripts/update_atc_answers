#!/usr/bin/env python

from __future__ import print_function
import argparse
import os
import shutil
import glob
from six.moves import input

all_models = ["acisfp", "dea", "dpa", "psmc",
              "fep1_mong", "fep1_actel",
              "bep_pcb"]

parser = argparse.ArgumentParser(description='A user-friendly script to update acis_thermal_check '
                                             'gold-standard answers.')
parser.add_argument("answer_location", type=str, help='The location of the new answers.')
parser.add_argument("--gold_standard", type=str, help='The location of the "gold standard" answers.',
                    default="/data/acis/thermal_model_tests")
parser.add_argument("--models", type=str, help='Which models should have their answers updated. '
                                               'Should be passed in as a comma-separated list. If '
                                               'not specified, all answers found will be updated.')

args = parser.parse_args()

gold_standard = os.path.abspath(args.gold_standard)
answer_location = os.path.abspath(args.answer_location)

if not os.path.exists(gold_standard):
    raise OSError("Cannot find the \"gold standard\" answers located at "
                  "%s!" % gold_standard)

if not os.path.exists(answer_location):
    raise OSError("Cannot find the path %s!" % answer_location)

if args.models is None:
    models = os.listdir(answer_location)
else:
    models = args.models.split(",")

if len(models) == 0:
    raise OSError("No answers were found in %s or specified!" % answer_location)

updated = []

for model in models:
    if model not in all_models:
        print("Directory %s not a model directory, so skipping." % model)
        continue
    answer_dir = os.path.join(answer_location, model)
    if not os.path.exists(answer_dir):
        raise OSError("Cannot find the directory containing "
                      "the new answers %s!" % answer_dir)
    while True:
        response = input("I'm about to update the answers for model %s. Is that ok? [y/N]" % model)
        response = response.upper()
        if response == "":
            response = "N"
        if response not in ["Y","N"]:
            print("Please enter y or n.")
        else:
            break
    if response == "Y":
        print("Updating the answers for the %s model." % model)
        gold_model_dir = os.path.join(gold_standard, model)
        new_model_dir = os.path.join(answer_dir, model)
        old_answers = glob.glob("%s.[0-9][0-9][0-9]" % model)
        old_answers.sort()
        if len(old_answers) == 0:
            print("No old answers are backed up, so we're creating the first backup.")
            latest_answer = 1
        else:
            latest_answer = int(old_answers[-1].split(".")[-1]) + 1
            print("Incrementing latest answers for %s to %d." % (model, latest_answer))
        old_model_dir = os.path.join(answer_dir, "%s.%03d" % (model, latest_answer))
        shutil.copytree(gold_model_dir, old_model_dir)
        shutil.rmtree(gold_model_dir)
        shutil.copytree(new_model_dir, gold_model_dir)
        updated.append(model)
    else:
        print("Ok, we will not update the answers for the %s model." % model)

if len(updated) == 0:
    raise RuntimeError("No answers were updated, so something must have gone wrong!")
else:
    print("The answers for the following models have been updated: ")
    print(",".join(updated))
